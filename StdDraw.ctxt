#BlueJ class context
comment0.params=
comment0.target=StdDraw()
comment1.params=
comment1.target=void\ setCanvasSize()
comment1.text=\r\n\ Set\ the\ window\ size\ to\ the\ default\ size\ 512-by-512\ pixels.\r\n
comment10.params=x
comment10.target=double\ scaleX(double)
comment11.params=y
comment11.target=double\ scaleY(double)
comment12.params=w
comment12.target=double\ factorX(double)
comment13.params=h
comment13.target=double\ factorY(double)
comment14.params=x
comment14.target=double\ userX(double)
comment15.params=y
comment15.target=double\ userY(double)
comment16.params=
comment16.target=void\ clear()
comment16.text=\r\n\ Clear\ the\ screen\ to\ the\ default\ color\ (white).\r\n
comment17.params=color
comment17.target=void\ clear(java.awt.Color)
comment17.text=\r\n\ Clear\ the\ screen\ to\ the\ given\ color.\r\n\ @param\ color\ the\ Color\ to\ make\ the\ background\r\n
comment18.params=
comment18.target=double\ getPenRadius()
comment18.text=\r\n\ Get\ the\ current\ pen\ radius.\r\n
comment19.params=
comment19.target=void\ setPenRadius()
comment19.text=\r\n\ Set\ the\ pen\ size\ to\ the\ default\ (.002).\r\n
comment2.params=w\ h
comment2.target=void\ setCanvasSize(int,\ int)
comment2.text=\r\n\ Set\ the\ window\ size\ to\ w-by-h\ pixels.\r\n\r\n\ @param\ w\ the\ width\ as\ a\ number\ of\ pixels\r\n\ @param\ h\ the\ height\ as\ a\ number\ of\ pixels\r\n\ @throws\ a\ RunTimeException\ if\ the\ width\ or\ height\ is\ 0\ or\ negative\r\n
comment20.params=r
comment20.target=void\ setPenRadius(double)
comment20.text=\r\n\ Set\ the\ radius\ of\ the\ pen\ to\ the\ given\ size.\r\n\ @param\ r\ the\ radius\ of\ the\ pen\r\n\ @throws\ RuntimeException\ if\ r\ is\ negative\r\n
comment21.params=
comment21.target=java.awt.Color\ getPenColor()
comment21.text=\r\n\ Get\ the\ current\ pen\ color.\r\n
comment22.params=
comment22.target=void\ setPenColor()
comment22.text=\r\n\ Set\ the\ pen\ color\ to\ the\ default\ color\ (black).\r\n
comment23.params=color
comment23.target=void\ setPenColor(java.awt.Color)
comment23.text=\r\n\ Set\ the\ pen\ color\ to\ the\ given\ color.\ The\ available\ pen\ colors\ are\r\n\ BLACK,\ BLUE,\ CYAN,\ DARK_GRAY,\ GRAY,\ GREEN,\ LIGHT_GRAY,\ MAGENTA,\r\n\ ORANGE,\ PINK,\ RED,\ WHITE,\ and\ YELLOW.\r\n\ @param\ color\ the\ Color\ to\ make\ the\ pen\r\n
comment24.params=
comment24.target=java.awt.Font\ getFont()
comment24.text=\r\n\ Get\ the\ current\ font.\r\n
comment25.params=
comment25.target=void\ setFont()
comment25.text=\r\n\ Set\ the\ font\ to\ the\ default\ font\ (sans\ serif,\ 16\ point).\r\n
comment26.params=f
comment26.target=void\ setFont(java.awt.Font)
comment26.text=\r\n\ Set\ the\ font\ to\ the\ given\ value.\r\n\ @param\ f\ the\ font\ to\ make\ text\r\n
comment27.params=x0\ y0\ x1\ y1
comment27.target=void\ line(double,\ double,\ double,\ double)
comment27.text=\r\n\ Draw\ a\ line\ from\ (x0,\ y0)\ to\ (x1,\ y1).\r\n\ @param\ x0\ the\ x-coordinate\ of\ the\ starting\ point\r\n\ @param\ y0\ the\ y-coordinate\ of\ the\ starting\ point\r\n\ @param\ x1\ the\ x-coordinate\ of\ the\ destination\ point\r\n\ @param\ y1\ the\ y-coordinate\ of\ the\ destination\ point\r\n
comment28.params=x\ y
comment28.target=void\ pixel(double,\ double)
comment28.text=\r\n\ Draw\ one\ pixel\ at\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ pixel\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ pixel\r\n
comment29.params=x\ y
comment29.target=void\ point(double,\ double)
comment29.text=\r\n\ Draw\ a\ point\ at\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ point\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ point\r\n
comment3.params=
comment3.target=void\ init()
comment30.params=x\ y\ r
comment30.target=void\ circle(double,\ double,\ double)
comment30.text=\r\n\ Draw\ a\ circle\ of\ radius\ r,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ r\ the\ radius\ of\ the\ circle\r\n\ @throws\ RuntimeException\ if\ the\ radius\ of\ the\ circle\ is\ negative\r\n
comment31.params=x\ y\ r
comment31.target=void\ filledCircle(double,\ double,\ double)
comment31.text=\r\n\ Draw\ filled\ circle\ of\ radius\ r,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ r\ the\ radius\ of\ the\ circle\r\n\ @throws\ RuntimeException\ if\ the\ radius\ of\ the\ circle\ is\ negative\r\n
comment32.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment32.target=void\ ellipse(double,\ double,\ double,\ double)
comment32.text=\r\n\ Draw\ an\ ellipse\ with\ given\ semimajor\ and\ semiminor\ axes,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ RuntimeException\ if\ either\ of\ the\ axes\ are\ negative\r\n
comment33.params=x\ y\ semiMajorAxis\ semiMinorAxis
comment33.target=void\ filledEllipse(double,\ double,\ double,\ double)
comment33.text=\r\n\ Draw\ an\ ellipse\ with\ given\ semimajor\ and\ semiminor\ axes,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ ellipse\r\n\ @param\ semiMajorAxis\ is\ the\ semimajor\ axis\ of\ the\ ellipse\r\n\ @param\ semiMinorAxis\ is\ the\ semiminor\ axis\ of\ the\ ellipse\r\n\ @throws\ RuntimeException\ if\ either\ of\ the\ axes\ are\ negative\r\n
comment34.params=x\ y\ r\ angle1\ angle2
comment34.target=void\ arc(double,\ double,\ double,\ double,\ double)
comment34.text=\r\n\ Draw\ an\ arc\ of\ radius\ r,\ centered\ on\ (x,\ y),\ from\ angle1\ to\ angle2\ (in\ degrees).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ circle\r\n\ @param\ r\ the\ radius\ of\ the\ circle\r\n\ @param\ angle1\ the\ starting\ angle.\ 0\ would\ mean\ an\ arc\ beginning\ at\ 3\ o'clock.\r\n\ @param\ angle2\ the\ angle\ at\ the\ end\ of\ the\ arc.\ For\ example,\ if\r\n\ \ \ \ \ \ \ \ you\ want\ a\ 90\ degree\ arc,\ then\ angle2\ should\ be\ angle1\ +\ 90.\r\n\ @throws\ RuntimeException\ if\ the\ radius\ of\ the\ circle\ is\ negative\r\n
comment35.params=x\ y\ r
comment35.target=void\ square(double,\ double,\ double)
comment35.text=\r\n\ Draw\ a\ square\ of\ side\ length\ 2r,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ r\ radius\ is\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ RuntimeException\ if\ r\ is\ negative\r\n
comment36.params=x\ y\ r
comment36.target=void\ filledSquare(double,\ double,\ double)
comment36.text=\r\n\ Draw\ a\ filled\ square\ of\ side\ length\ 2r,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ square\r\n\ @param\ r\ radius\ is\ half\ the\ length\ of\ any\ side\ of\ the\ square\r\n\ @throws\ RuntimeException\ if\ r\ is\ negative\r\n
comment37.params=x\ y\ halfWidth\ halfHeight
comment37.target=void\ rectangle(double,\ double,\ double,\ double)
comment37.text=\r\n\ Draw\ a\ rectangle\ of\ given\ half\ width\ and\ half\ height,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ halfWidth\ is\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ halfHeight\ is\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ RuntimeException\ if\ halfWidth\ or\ halfHeight\ is\ negative\r\n
comment38.params=x\ y\ halfWidth\ halfHeight
comment38.target=void\ filledRectangle(double,\ double,\ double,\ double)
comment38.text=\r\n\ Draw\ a\ filled\ rectangle\ of\ given\ half\ width\ and\ half\ height,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ center\ of\ the\ rectangle\r\n\ @param\ halfWidth\ is\ half\ the\ width\ of\ the\ rectangle\r\n\ @param\ halfHeight\ is\ half\ the\ height\ of\ the\ rectangle\r\n\ @throws\ RuntimeException\ if\ halfWidth\ or\ halfHeight\ is\ negative\r\n
comment39.params=x\ y
comment39.target=void\ polygon(double[],\ double[])
comment39.text=\r\n\ Draw\ a\ polygon\ with\ the\ given\ (x[i],\ y[i])\ coordinates.\r\n\ @param\ x\ an\ array\ of\ all\ the\ x-coordindates\ of\ the\ polygon\r\n\ @param\ y\ an\ array\ of\ all\ the\ y-coordindates\ of\ the\ polygon\r\n
comment4.params=
comment4.target=javax.swing.JMenuBar\ createMenuBar()
comment40.params=x\ y
comment40.target=void\ filledPolygon(double[],\ double[])
comment40.text=\r\n\ Draw\ a\ filled\ polygon\ with\ the\ given\ (x[i],\ y[i])\ coordinates.\r\n\ @param\ x\ an\ array\ of\ all\ the\ x-coordindates\ of\ the\ polygon\r\n\ @param\ y\ an\ array\ of\ all\ the\ y-coordindates\ of\ the\ polygon\r\n
comment41.params=filename
comment41.target=java.awt.Image\ getImage(java.lang.String)
comment41.text=\r\n\ \ Drawing\ images.\r\n
comment42.params=x\ y\ s
comment42.target=void\ picture(double,\ double,\ java.lang.String)
comment42.text=\r\n\ Draw\ picture\ (gif,\ jpg,\ or\ png)\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ center\ x-coordinate\ of\ the\ image\r\n\ @param\ y\ the\ center\ y-coordinate\ of\ the\ image\r\n\ @param\ s\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @throws\ RuntimeException\ if\ the\ image\ is\ corrupt\r\n
comment43.params=x\ y\ s\ degrees
comment43.target=void\ picture(double,\ double,\ java.lang.String,\ double)
comment43.text=\r\n\ Draw\ picture\ (gif,\ jpg,\ or\ png)\ centered\ on\ (x,\ y),\r\n\ rotated\ given\ number\ of\ degrees\r\n\ @param\ x\ the\ center\ x-coordinate\ of\ the\ image\r\n\ @param\ y\ the\ center\ y-coordinate\ of\ the\ image\r\n\ @param\ s\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ RuntimeException\ if\ the\ image\ is\ corrupt\r\n
comment44.params=x\ y\ s\ w\ h
comment44.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double)
comment44.text=\r\n\ Draw\ picture\ (gif,\ jpg,\ or\ png)\ centered\ on\ (x,\ y),\ rescaled\ to\ w-by-h.\r\n\ @param\ x\ the\ center\ x\ coordinate\ of\ the\ image\r\n\ @param\ y\ the\ center\ y\ coordinate\ of\ the\ image\r\n\ @param\ s\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ w\ the\ width\ of\ the\ image\r\n\ @param\ h\ the\ height\ of\ the\ image\r\n\ @throws\ RuntimeException\ if\ the\ width\ height\ are\ negative\r\n\ @throws\ RuntimeException\ if\ the\ image\ is\ corrupt\r\n
comment45.params=x\ y\ s\ w\ h\ degrees
comment45.target=void\ picture(double,\ double,\ java.lang.String,\ double,\ double,\ double)
comment45.text=\r\n\ Draw\ picture\ (gif,\ jpg,\ or\ png)\ centered\ on\ (x,\ y),\ rotated\r\n\ given\ number\ of\ degrees,\ rescaled\ to\ w-by-h.\r\n\ @param\ x\ the\ center\ x-coordinate\ of\ the\ image\r\n\ @param\ y\ the\ center\ y-coordinate\ of\ the\ image\r\n\ @param\ s\ the\ name\ of\ the\ image/picture,\ e.g.,\ "ball.gif"\r\n\ @param\ w\ the\ width\ of\ the\ image\r\n\ @param\ h\ the\ height\ of\ the\ image\r\n\ @param\ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n\ @throws\ RuntimeException\ if\ the\ image\ is\ corrupt\r\n
comment46.params=x\ y\ s
comment46.target=void\ text(double,\ double,\ java.lang.String)
comment46.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ on\ (x,\ y).\r\n\ @param\ x\ the\ center\ x-coordinate\ of\ the\ text\r\n\ @param\ y\ the\ center\ y-coordinate\ of\ the\ text\r\n\ @param\ s\ the\ text\r\n
comment47.params=x\ y\ s\ degrees
comment47.target=void\ text(double,\ double,\ java.lang.String,\ double)
comment47.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ centered\ on\ (x,\ y)\ and\r\n\ rotated\ by\ the\ specified\ number\ of\ degrees\ \ \r\n\ @param\ x\ the\ center\ x-coordinate\ of\ the\ text\r\n\ @param\ y\ the\ center\ y-coordinate\ of\ the\ text\r\n\ @param\ s\ the\ text\r\n\ @param\ degrees\ is\ the\ number\ of\ degrees\ to\ rotate\ counterclockwise\r\n
comment48.params=x\ y\ s
comment48.target=void\ textLeft(double,\ double,\ java.lang.String)
comment48.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ left-aligned\ at\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ text\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ text\r\n\ @param\ s\ the\ text\r\n
comment49.params=x\ y\ s
comment49.target=void\ textRight(double,\ double,\ java.lang.String)
comment49.text=\r\n\ Write\ the\ given\ text\ string\ in\ the\ current\ font,\ right-aligned\ at\ (x,\ y).\r\n\ @param\ x\ the\ x-coordinate\ of\ the\ text\r\n\ @param\ y\ the\ y-coordinate\ of\ the\ text\r\n\ @param\ s\ the\ text\r\n
comment5.params=
comment5.target=void\ setXscale()
comment5.text=\r\n\ Set\ the\ x-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
comment50.params=t
comment50.target=void\ show(int)
comment50.text=\r\n\ Display\ on\ screen,\ pause\ for\ t\ milliseconds,\ and\ turn\ on\r\n\ <em>animation\ mode</em>\:\ subsequent\ calls\ to\r\n\ drawing\ methods\ such\ as\ <tt>line()</tt>,\ <tt>circle()</tt>,\ and\ <tt>square()</tt>\r\n\ will\ not\ be\ displayed\ on\ screen\ until\ the\ next\ call\ to\ <tt>show()</tt>.\r\n\ This\ is\ useful\ for\ producing\ animations\ (clear\ the\ screen,\ draw\ a\ bunch\ of\ shapes,\r\n\ display\ on\ screen\ for\ a\ fixed\ amount\ of\ time,\ and\ repeat).\ It\ also\ speeds\ up\r\n\ drawing\ a\ huge\ number\ of\ shapes\ (call\ <tt>show(0)</tt>\ to\ defer\ drawing\r\n\ on\ screen,\ draw\ the\ shapes,\ and\ call\ <tt>show(0)</tt>\ to\ display\ them\ all\r\n\ on\ screen\ at\ once).\r\n\ @param\ t\ number\ of\ milliseconds\r\n
comment51.params=
comment51.target=void\ show()
comment51.text=\r\n\ Display\ on-screen\ and\ turn\ off\ animation\ mode\:\r\n\ subsequent\ calls\ to\r\n\ drawing\ methods\ such\ as\ <tt>line()</tt>,\ <tt>circle()</tt>,\ and\ <tt>square()</tt>\r\n\ will\ be\ displayed\ on\ screen\ when\ called.\ This\ is\ the\ default.\r\n
comment52.params=
comment52.target=void\ draw()
comment53.params=filename
comment53.target=void\ save(java.lang.String)
comment53.text=\r\n\ Save\ onscreen\ image\ to\ file\ -\ suffix\ must\ be\ png,\ jpg,\ or\ gif.\r\n\ @param\ filename\ the\ name\ of\ the\ file\ with\ one\ of\ the\ required\ suffixes\r\n
comment54.params=e
comment54.target=void\ actionPerformed(java.awt.event.ActionEvent)
comment54.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment55.params=
comment55.target=boolean\ mousePressed()
comment55.text=\r\n\ Is\ the\ mouse\ being\ pressed?\r\n\ @return\ true\ or\ false\r\n
comment56.params=
comment56.target=double\ mouseX()
comment56.text=\r\n\ What\ is\ the\ x-coordinate\ of\ the\ mouse?\r\n\ @return\ the\ value\ of\ the\ x-coordinate\ of\ the\ mouse\r\n
comment57.params=
comment57.target=double\ mouseY()
comment57.text=\r\n\ What\ is\ the\ y-coordinate\ of\ the\ mouse?\r\n\ @return\ the\ value\ of\ the\ y-coordinate\ of\ the\ mouse\r\n
comment58.params=e
comment58.target=void\ mouseClicked(java.awt.event.MouseEvent)
comment58.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment59.params=e
comment59.target=void\ mouseEntered(java.awt.event.MouseEvent)
comment59.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment6.params=
comment6.target=void\ setYscale()
comment6.text=\r\n\ Set\ the\ y-scale\ to\ be\ the\ default\ (between\ 0.0\ and\ 1.0).\r\n
comment60.params=e
comment60.target=void\ mouseExited(java.awt.event.MouseEvent)
comment60.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment61.params=e
comment61.target=void\ mousePressed(java.awt.event.MouseEvent)
comment61.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment62.params=e
comment62.target=void\ mouseReleased(java.awt.event.MouseEvent)
comment62.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment63.params=e
comment63.target=void\ mouseDragged(java.awt.event.MouseEvent)
comment63.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment64.params=e
comment64.target=void\ mouseMoved(java.awt.event.MouseEvent)
comment64.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment65.params=
comment65.target=boolean\ hasNextKeyTyped()
comment65.text=\r\n\ Has\ the\ user\ typed\ a\ key?\r\n\ @return\ true\ if\ the\ user\ has\ typed\ a\ key,\ false\ otherwise\r\n
comment66.params=
comment66.target=char\ nextKeyTyped()
comment66.text=\r\n\ What\ is\ the\ next\ key\ that\ was\ typed\ by\ the\ user?\ This\ method\ returns\r\n\ a\ Unicode\ character\ corresponding\ to\ the\ key\ typed\ (such\ as\ 'a'\ or\ 'A').\r\n\ It\ cannot\ identify\ action\ keys\ (such\ as\ F1\r\n\ and\ arrow\ keys)\ or\ modifier\ keys\ (such\ as\ control).\r\n\ @return\ the\ next\ Unicode\ key\ typed\r\n
comment67.params=keycode
comment67.target=boolean\ isKeyPressed(int)
comment67.text=\r\n\ Is\ the\ keycode\ currently\ being\ pressed?\ This\ method\ takes\ as\ an\ argument\r\n\ the\ keycode\ (corresponding\ to\ a\ physical\ key).\ It\ can\ handle\ action\ keys\r\n\ (such\ as\ F1\ and\ arrow\ keys)\ and\ modifier\ keys\ (such\ as\ shift\ and\ control).\r\n\ See\ <a\ href\ \=\ "http\://download.oracle.com/javase/6/docs/api/java/awt/event/KeyEvent.html">KeyEvent.java</a>\r\n\ for\ a\ description\ of\ key\ codes.\r\n\ @return\ true\ if\ keycode\ is\ currently\ being\ pressed,\ false\ otherwise\r\n
comment68.params=e
comment68.target=void\ keyTyped(java.awt.event.KeyEvent)
comment68.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment69.params=e
comment69.target=void\ keyPressed(java.awt.event.KeyEvent)
comment69.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment7.params=min\ max
comment7.target=void\ setXscale(double,\ double)
comment7.text=\r\n\ Set\ the\ x-scale\ (a\ 10%\ border\ is\ added\ to\ the\ values)\r\n\ @param\ min\ the\ minimum\ value\ of\ the\ x-scale\r\n\ @param\ max\ the\ maximum\ value\ of\ the\ x-scale\r\n
comment70.params=e
comment70.target=void\ keyReleased(java.awt.event.KeyEvent)
comment70.text=\r\n\ This\ method\ cannot\ be\ called\ directly.\r\n
comment71.params=args
comment71.target=void\ main(java.lang.String[])
comment71.text=\r\n\ Test\ client.\r\n
comment8.params=min\ max
comment8.target=void\ setYscale(double,\ double)
comment8.text=\r\n\ Set\ the\ y-scale\ (a\ 10%\ border\ is\ added\ to\ the\ values).\r\n\ @param\ min\ the\ minimum\ value\ of\ the\ y-scale\r\n\ @param\ max\ the\ maximum\ value\ of\ the\ y-scale\r\n
comment9.params=min\ max
comment9.target=void\ setScale(double,\ double)
comment9.text=\r\n\ Set\ the\ x-scale\ and\ y-scale\ (a\ 10%\ border\ is\ added\ to\ the\ values)\r\n\ @param\ min\ the\ minimum\ value\ of\ the\ x-\ and\ y-scales\r\n\ @param\ max\ the\ maximum\ value\ of\ the\ x-\ and\ y-scales\r\n
numComments=72
